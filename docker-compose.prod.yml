name: app-incendios

networks:
  app-net:
    driver: bridge

volumes:
  pg-data:
  pg-backups:
  caddy-data:
  caddy-config:

services:
  pg:
    image: postgis/postgis:16-3.4
    container_name: pg
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: ${TZ:-America/Guatemala}
    volumes:
      - /opt/app-incendios/pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - app-net

  pg-backup:
    image: prodrigestivill/postgres-backup-local:16
    container_name: pg-backup
    depends_on:
      pg:
        condition: service_healthy
    environment:
      POSTGRES_HOST: pg
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: "30 2 * * *"
      BACKUP_KEEP_DAYS: 7
      BACKUP_COMPRESSION: "gzip"
      BACKUP_DIR: /backups
      TZ: ${TZ:-America/Guatemala}
    volumes:
      - /opt/app-incendios/pg-backups:/backups
    restart: unless-stopped
    networks:
      - app-net

  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: app-incendios:latest
    container_name: api
    env_file:
      - .env
    environment:
      NODE_ENV: production
      TZ: ${TZ:-America/Guatemala}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # DB/Redis internos por nombre de servicio
      DB_HOST: pg
      DB_PORT: 5432
      DB_SSL: "false"
      REDIS_URL: redis://redis:6379

      # Secret heredado del .env
      JWT_SECRET: ${JWT_SECRET}

      # ðŸ‘‡ MUY IMPORTANTE: que escuche en toda la interfaz
      HOST: "0.0.0.0"
      PORT: "4000"
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["/bin/sh", "/app/docker/entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:4000/health/liveness || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-net
    # No exponemos 4000 al host; Caddy hace proxy 80/443

  caddy:
    image: caddy:2
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-net
